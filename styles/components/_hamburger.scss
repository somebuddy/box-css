$line-height: 1.5rem !default;
$column-width: 1rem !default;
$hamburger-line-width: 3px;

.hamburger-button {
  @include flex-inline;
  @include row-layout;
  cursor: pointer;

  > .lines {
    position: relative;
    margin-top: calc(#{$line-height} - 1px);
    margin-bottom: calc(#{$line-height} - 2px);
    opacity: 0.5;

    &, &:after, &:before {
      @include size($line-height, $hamburger-line-width);
      border-radius: 3px;
      transition: all .5s ease;
    }

    &:after, &:before {
      content: '';
      @include absolute($left: 0, $right: 0);
    }

    &:after { top: 6px; }
    &:before { top: -6px; }
  }
}

.hamburger-button:hover > .lines {
  opacity: 1;
  transition: all .35s ease;

  &:after { top: 10px; }
  &:before { top: -10px; }
}

/**
* Hover-to-* effects
**/

.hamburger-button:hover,
*:hover.hover-to-arrow-down {
  &[class^="hover-to-arrow-"], &[class*=" hover-to-arrow-"] {
    & > .lines {
      &:after, &:before {
        transform-origin: 2px center;
        width: 1em;
        transition: all .35s ease;
      }

      &:after {
        top: 1px;
        transform: rotate(35deg);
      }

      &:before {
        top: -1px;
        transform: rotate(-35deg);
      }
    }
  }
}

@mixin hover-to-arrow-rotate($cls, $deg: 360deg) {
  .hamburger-button.hover-to-arrow-#{$cls}:hover > .lines,
  *:hover.hover-to-arrow-#{$cls} > .hamburger-button > .lines {
    transform: rotate(#{$deg}) scale(0.6);
  }
}

/* Arrow down */
@include hover-to-arrow-rotate(down, 270deg);

/* Arrow up */
@include hover-to-arrow-rotate(up, -270deg);

/* Arrow left */
@include hover-to-arrow-rotate(left);

/* Arrow right */
@include hover-to-arrow-rotate(right, -180deg);

/* Expanded state arrow */
.expanded > .hamburger-button > .lines {
  opacity: 1;
  transform: rotate(90deg) scale(0.6);
  transition: all .35s ease;

  &:after, &:before {
    transform-origin: 2px center;
    width: 1em;
    transition: all .35s ease;
  }

  &:after {
    transform: rotate(35deg);
    top: 1px;
  }

  &:before {
    transform: rotate(-35deg);
    top: -1px;
  }
}

@mixin hamburger-button-colorize($cls: null, $color: white) {
  $selector: if($cls, #{".hamburger-button." + $cls}, ".hamburger-button");
  #{$selector} {
    color: transparentize($color, 0.5);

    &:hover {
      color: $color;
    }

    > .lines {
      &, &:after, &:before {
        background-color: $color;
      }
    }
  }
}

@include hamburger-button-colorize;
@include hamburger-button-colorize(black, black);
@include hamburger-button-colorize(red, #d50000);